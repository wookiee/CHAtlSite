require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe VenuesController, :type => :controller do

  # This should return the minimal set of attributes required to create a valid
  # Venue. As you add validations to Venue, be sure to
  # update the return value of this method accordingly.
  def valid_attributes
    {
      name: "MyString",
      street_address: "MyString",
      city: "MyString",
      state: "MyString",
      zip: "MyString"
    }
  end

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # VenuesController. Be sure to keep this updated too.
  def valid_session
    {}
  end

  def mock_admin
      user = double("user")
      allow(user).to receive(:admin?).and_return(true)
      allow(controller).to receive(:current_user).and_return(user)
      user
  end

  def mock_member
      user = double("user")
      allow(user).to receive(:admin?).and_return(false)
      allow(controller).to receive(:current_user).and_return(user)
      user
  end

  describe "GET index" do
    it "assigns all venues as @venues" do
      venue = Venue.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:venues)).to eq([venue])
    end
  end

  describe "GET show" do
    it "assigns the requested venue as @venue" do
      venue = Venue.create! valid_attributes
      get :show, {:id => venue.to_param}, valid_session
      expect(assigns(:venue)).to eq(venue)
    end
  end

  # 
  # Regular members
  # 

  describe "as a logged in member" do
    before(:each) do
      @user = mock_member
    end

    describe "GET new" do
      it "denies access" do
        get :new, {}, valid_session
        expect(response).to redirect_to(root_url)
      end

      it "assigns flash alert" do
        get :new, {}, valid_session
        expect(flash[:alert]).to eq("You are not authorized to access this page.")
      end
    end

    describe "GET edit" do
      it "denies access" do
        venue = Venue.create! valid_attributes
        get :edit, {:id => venue.to_param}, valid_session
        expect(response).to redirect_to(root_url)
      end

      it "assigns flash alert" do
        venue = Venue.create! valid_attributes
        get :edit, {:id => venue.to_param}, valid_session
        expect(flash[:alert]).to eq("You are not authorized to access this page.")
      end
    end

    describe "POST create" do
      it "denies access" do
        post :create, {:venue => valid_attributes}, valid_session
        expect(response).to redirect_to(root_url)
      end

      it "assigns flash alert" do
        post :create, {:venue => valid_attributes}, valid_session
        expect(flash[:alert]).to eq("You are not authorized to access this page.")
      end
    end

    describe "PUT update" do
      it "denies access" do
        venue = Venue.create! valid_attributes
        put :update, {:id => venue.to_param, :venue => { "name" => "MyString" }}, valid_session
        expect(response).to redirect_to(root_url)
      end

      it "assigns flash alert" do
        venue = Venue.create! valid_attributes
        put :update, {:id => venue.to_param, :venue => { "name" => "MyString" }}, valid_session
        expect(flash[:alert]).to eq("You are not authorized to access this page.")
      end
    end

    describe "DELETE destroy" do
      it "denies access" do
        venue = Venue.create! valid_attributes
        delete :destroy, {:id => venue.to_param}, valid_session
        expect(response).to redirect_to(root_url)
      end

      it "assigns flash alert" do
        venue = Venue.create! valid_attributes
        delete :destroy, {:id => venue.to_param}, valid_session
        expect(flash[:alert]).to eq("You are not authorized to access this page.")
      end
    end
  end

  # 
  # Administrators
  # 

  describe "as a logged in admin" do
    before(:each) do
      @user = mock_admin
    end

    describe "GET new" do
      it "assigns a new venue as @venue" do
        get :new, {}, valid_session
        expect(assigns(:venue)).to be_a_new(Venue)
      end
    end

    describe "GET edit" do
      it "assigns the requested venue as @venue" do
        venue = Venue.create! valid_attributes
        get :edit, {:id => venue.to_param}, valid_session
        expect(assigns(:venue)).to eq(venue)
      end
    end

    describe "POST create" do
      describe "with valid params" do
        it "creates a new Venue" do
          expect {
            post :create, {:venue => valid_attributes}, valid_session
          }.to change(Venue, :count).by(1)
        end

        it "assigns a newly created venue as @venue" do
          post :create, {:venue => valid_attributes}, valid_session
          expect(assigns(:venue)).to be_a(Venue)
          expect(assigns(:venue)).to be_persisted
        end

        it "redirects to the created venue" do
          post :create, {:venue => valid_attributes}, valid_session
          expect(response).to redirect_to(Venue.last)
        end
      end

      describe "with invalid params" do
        it "assigns a newly created but unsaved venue as @venue" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Venue).to receive(:save).and_return(false)
          post :create, {:venue => { "name" => "invalid value" }}, valid_session
          expect(assigns(:venue)).to be_a_new(Venue)
        end

        it "re-renders the 'new' template" do
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Venue).to receive(:save).and_return(false)
          post :create, {:venue => { "name" => "invalid value" }}, valid_session
          expect(response).to render_template("new")
        end
      end
    end

    describe "PUT update" do
      describe "with valid params" do
        it "updates the requested venue" do
          venue = Venue.create! valid_attributes
          # Assuming there are no other venues in the database, this
          # specifies that the Venue created on the previous line
          # receives the :update message with whatever params are
          # submitted in the request.
          expect_any_instance_of(Venue).to receive(:update).with({ "name" => "MyString" })
          put :update, {:id => venue.to_param, :venue => { "name" => "MyString" }}, valid_session
        end

        it "assigns the requested venue as @venue" do
          venue = Venue.create! valid_attributes
          put :update, {:id => venue.to_param, :venue => valid_attributes}, valid_session
          expect(assigns(:venue)).to eq(venue)
        end

        it "redirects to the venue" do
          venue = Venue.create! valid_attributes
          put :update, {:id => venue.to_param, :venue => valid_attributes}, valid_session
          expect(response).to redirect_to(venue)
        end
      end

      describe "with invalid params" do
        it "assigns the venue as @venue" do
          venue = Venue.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Venue).to receive(:save).and_return(false)
          put :update, {:id => venue.to_param, :venue => { "name" => "invalid value" }}, valid_session
          expect(assigns(:venue)).to eq(venue)
        end

        it "re-renders the 'edit' template" do
          venue = Venue.create! valid_attributes
          # Trigger the behavior that occurs when invalid params are submitted
          allow_any_instance_of(Venue).to receive(:save).and_return(false)
          put :update, {:id => venue.to_param, :venue => { "name" => "invalid value" }}, valid_session
          expect(response).to render_template("edit")
        end
      end
    end

    describe "DELETE destroy" do
      it "destroys the requested venue" do
        venue = Venue.create! valid_attributes
        expect {
          delete :destroy, {:id => venue.to_param}, valid_session
        }.to change(Venue, :count).by(-1)
      end

      it "redirects to the venues list" do
        venue = Venue.create! valid_attributes
        delete :destroy, {:id => venue.to_param}, valid_session
        expect(response).to redirect_to(venues_url)
      end
    end
  end
end
